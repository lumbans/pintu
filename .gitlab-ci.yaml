stages:
  - build
  - test
  - deploy

variables:
  RULES_CHANGES_PATH: "**/*"

.base-rules:
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: always
    - if: '$CI_PIPELINE_SOURCE == "push"'
      when: never
    - if: $CI_COMMIT_TAG
      when: never
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - $RULES_CHANGES_PATH
    - when: manual
      allow_failure: true

.go-service:
  extends: .base-rules
  variables:
    RULES_CHANGES_PATH: "go-service/**/*"

.nodejs-service:
  extends: .base-rules
  variables:
    RULES_CHANGES_PATH: "nodejs-service/**/*"

go-service-build:
  stage: build
  extends: .go-service
  image: docker:stable
  needs: ["nodejs-service-test"]
  services:
    - docker:18-dind
  variables:
    DOCKER_DRIVER: overlay2
  script: |
    # install AWS CLI
    apk add --no-cache python3 py3-pip \
      && pip3 install --upgrade pip \
      && pip3 install awscli \
      && rm -rf /var/cache/apk/*
    # build and store image
    aws ecr get-login --no-include-email --registry-ids $AWS_ECR_ACCOUNT | sh
    docker build --rm=true -t $IMAGE_NAME . && docker push $IMAGE_NAME

nodejs-service-build:
  stage: build
  extends: .nodejs-service
  image: docker:stable
  needs: ["go-service-test"]
  services:
    - docker:18-dind
  variables:
    DOCKER_DRIVER: overlay2
  script: |
    # install AWS CLI
    apk add --no-cache python3 py3-pip \
      && pip3 install --upgrade pip \
      && pip3 install awscli \
      && rm -rf /var/cache/apk/*
    # build and store image
    aws ecr get-login --no-include-email --registry-ids $AWS_ECR_ACCOUNT | sh
    docker build --rm=true -t $IMAGE_NAME . && docker push $IMAGE_NAME

go-service-test:
  stage: test
  extends: .go-service
  image: registry.gitlab.com/pipeline-components/go-lint:latest
  script:
    - golint go-service/*.go

nodejs-service-test:
  stage: test
  extends: .nodejs-service
  image: node:latest
  script:
    # Install ESLint in this docker container
    - npm install -g eslint
    # Configure ESLint (will read your .eslintrc file)
    - eslint --init
    # Run ESLint
    - eslint nodejs-services/*.js

go-service-deploy:
  stage: deploy
  extends: .go-service
  image: alpine/helm
  script: |
    # install AWS CLI
    apk add --no-cache python3 py3-pip \
      && pip3 install --upgrade pip \
      && pip3 install awscli \
      && rm -rf /var/cache/apk/*
    # add EKS cluster
    aws eks --region eu-central-1 update-kubeconfig --name mycluster
    # deploy new release
    helm dependency update ./helm
    helm upgrade --install myapp ./helm --wait

nodejs-service-deploy:
  stage: deploy
  extends: .nodejs-service
  image: alpine/helm
  script: |
    # install AWS CLI
    apk add --no-cache python3 py3-pip \
      && pip3 install --upgrade pip \
      && pip3 install awscli \
      && rm -rf /var/cache/apk/*
    # add EKS cluster
    aws eks --region eu-central-1 update-kubeconfig --name mycluster
    # deploy new release
    helm dependency update ./helm
    helm upgrade --install myapp ./helm --wait